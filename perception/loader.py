"""
    Dataloaders for training and testing.
    Import the function readTrImages and MyDataset object for creating the training and validation dataloaders.
    Important!! - Make sure the deploy folder is in the same directory as this loader file. 
    TODO: Make testing code.       
"""
import sys
import os
import struct
import numpy as np
import torch
from torchvision import transforms
from PIL import Image
import random
from numpy.lib.shape_base import split
import torch.utils.data as data
from torch.utils.data import DataLoader, Dataset

class MyDataset(Dataset):
    # An object for representing the Dataset for Pytorch.
    def __init__(self, image_fns, labels, dim):
        super().__init__()
        self.image_fns = image_fns
        self.labels = labels
        self.dim = (dim, dim)

    def __len__(self):
        return max(len(self.image_fns), len(self.labels))

    def getImage(self, index):
        image = Image.open(self.image_fns[index])
        image = image.resize(self.dim)
        convert_tensor = transforms.ToTensor()
        return convert_tensor(image)

    def __getitem__(self, index):
        image = self.getImage(index)
        label = np.array([0, 0, 0])
        label[self.labels[index]] = 1
        label = torch.tensor(label)
        return image, label

def writeFirstSubmission():
    # The code for the first submission.
    output = open('Team19.txt', 'w')
    output.write('guid/image,label\n')
    count = 0

    for folder in os.listdir('./deploy/test/'):
        for file in os.listdir('./deploy/test/' + folder):
            if file.endswith("_image.jpg"):
                output.write(folder + "/" + file[:-10] + ",1\n")
                count += 1

    print(count)
    output.close()
    
def readTrLabels():
    # Reading the training labels from the generated trainval_labels.csv file, which is generated by extract_info.py from Canvas.
    file_to_read = "deploy/trainval/trainval_labels.csv"
    label_dict = {}
    file_data = open(file_to_read)
    count = 0
    for row in file_data:
        if count != 0:
            split_lst = row.split(',')
            label_dict[split_lst[0]] = int(split_lst[1][0])
        count += 1
    
    return label_dict

def createDataset(images, labels, batch_size, dim):
    # Making dataset and dataloaders for PyTorch from a set of image filenames and labels.
    dataset = MyDataset(images ,labels, dim)
    loader = DataLoader(dataset,batch_size=batch_size, shuffle=False)
    return dataset, loader

def readTrImages(batch_size, split_ratio, dim=256, shuffle=False):
    # Reading and splitting the images from trainval and returning the dataset objects and the dataloaders for training.
    labels_dict = readTrLabels()
    images = []
    labels = []

    for folder in os.listdir('./deploy/trainval/'):
        if folder.endswith(".csv"):
            continue
        for file in os.listdir('./deploy/trainval/' + folder):
            if file.endswith("_image.jpg"):
                image_id = folder + "/" + file[:-10]
                tmp_label = labels_dict[image_id]
                tmp_fn = './deploy/trainval/' + folder + "/" + file
                images.append(tmp_fn)
                labels.append(tmp_label)

    print(str(len(images)) + " images read.")
    print(str(len(labels)) + " labels read.")
    idx_shuffled = list(range(0, len(images)))

    if shuffle:
        random.shuffle(idx_shuffled)

    split_idx = int(split_ratio * len(images))
    train_images = [images[i] for i in idx_shuffled[:split_idx]]
    train_labels = [labels[i] for i in idx_shuffled[:split_idx]]
    val_images = [images[i] for i in idx_shuffled[split_idx:]]
    val_labels = [labels[i] for i in idx_shuffled[split_idx:]]

    train_dataset, train_loader = createDataset(train_images, train_labels, batch_size, dim)
    val_dataset, val_loader = createDataset(val_images, val_labels, batch_size, dim)
    print("Dataloaders created, train has " + str(len(train_dataset)) + " samples and val has " + str(len(val_dataset)) + " samples.")
    return train_dataset, train_loader, val_dataset, val_loader

# To test
if __name__ == '__main__':
    train_dataset, train_loader, test_dataset, test_loader = readTrImages(8, 0.7, dim=224)

